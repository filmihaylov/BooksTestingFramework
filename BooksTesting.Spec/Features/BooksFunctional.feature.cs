// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BooksTesting.Spec.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BooksFunctionalFeature : Xunit.IClassFixture<BooksFunctionalFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BooksFunctional.feature"
#line hidden
        
        public BooksFunctionalFeature(BooksFunctionalFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BooksFunctional", "\tin this feature file we will explore some functional tests", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="deleted books should not be returend from all endpoint")]
        [Xunit.TraitAttribute("FeatureTitle", "BooksFunctional")]
        [Xunit.TraitAttribute("Description", "deleted books should not be returend from all endpoint")]
        [Xunit.TraitAttribute("Category", "functinal")]
        public virtual void DeletedBooksShouldNotBeReturendFromAllEndpoint()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("deleted books should not be returend from all endpoint", new string[] {
                        "functinal"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Author",
                        "Title",
                        "Id",
                        "Description"});
            table1.AddRow(new string[] {
                        "SomeoneTest",
                        "SomeTitleForDelete",
                        "15",
                        "book about something"});
#line 6
 testRunner.Given("I have books", ((string)(null)), table1, "Given ");
#line 9
 testRunner.And("I delete a book with id \'15\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Author",
                        "Title",
                        "Id",
                        "Description"});
            table2.AddRow(new string[] {
                        "SomeoneTest",
                        "SomeTitleForDelete",
                        "15",
                        "book about something"});
#line 10
 testRunner.Then("book should not be present in get all endpoint", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="deleted books should not be returend from search endpoint")]
        [Xunit.TraitAttribute("FeatureTitle", "BooksFunctional")]
        [Xunit.TraitAttribute("Description", "deleted books should not be returend from search endpoint")]
        [Xunit.TraitAttribute("Category", "functinal")]
        public virtual void DeletedBooksShouldNotBeReturendFromSearchEndpoint()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("deleted books should not be returend from search endpoint", new string[] {
                        "functinal"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Author",
                        "Title",
                        "Id",
                        "Description"});
            table3.AddRow(new string[] {
                        "OscardWild",
                        "TitleNotFound",
                        "16",
                        "book about something"});
#line 17
 testRunner.Given("I have books", ((string)(null)), table3, "Given ");
#line 20
 testRunner.And("I delete a book with id \'16\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.Then("book should not be present in search by title \"TitleNotFound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="I can search by Author for book")]
        [Xunit.TraitAttribute("FeatureTitle", "BooksFunctional")]
        [Xunit.TraitAttribute("Description", "I can search by Author for book")]
        [Xunit.TraitAttribute("Category", "functinal")]
        public virtual void ICanSearchByAuthorForBook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can search by Author for book", new string[] {
                        "functinal"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I search for the books author \'InitialGeneratedAuthor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Author",
                        "Title",
                        "Id",
                        "Description"});
            table4.AddRow(new string[] {
                        "InitialGeneratedAuthor",
                        "InitialGeneratedTitle",
                        "2",
                        "InitialGeneratedDescription"});
#line 27
 testRunner.Then("the book should be found by author", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="I can search by Id for book")]
        [Xunit.TraitAttribute("FeatureTitle", "BooksFunctional")]
        [Xunit.TraitAttribute("Description", "I can search by Id for book")]
        [Xunit.TraitAttribute("Category", "functinal")]
        public virtual void ICanSearchByIdForBook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can search by Id for book", new string[] {
                        "functinal"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("I search for the books id \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Author",
                        "Title",
                        "Id",
                        "Description"});
            table5.AddRow(new string[] {
                        "InitialGeneratedAuthor",
                        "InitialGeneratedTitle",
                        "2",
                        "InitialGeneratedDescription"});
#line 35
 testRunner.Then("the book should be found by id", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="I can search by description for book")]
        [Xunit.TraitAttribute("FeatureTitle", "BooksFunctional")]
        [Xunit.TraitAttribute("Description", "I can search by description for book")]
        [Xunit.TraitAttribute("Category", "functinal")]
        public virtual void ICanSearchByDescriptionForBook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can search by description for book", new string[] {
                        "functinal"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I search for the books description \'InitialGeneratedDescription\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Author",
                        "Title",
                        "Id",
                        "Description"});
            table6.AddRow(new string[] {
                        "InitialGeneratedAuthor",
                        "InitialGeneratedTitle",
                        "2",
                        "InitialGeneratedDescription"});
#line 43
 testRunner.Then("the book should be found by description", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BooksFunctionalFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BooksFunctionalFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
