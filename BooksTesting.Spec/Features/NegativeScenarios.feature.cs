// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BooksTesting.Spec.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NegativeScenariosFeature : Xunit.IClassFixture<NegativeScenariosFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "NegativeScenarios.feature"
#line hidden
        
        public NegativeScenariosFeature(NegativeScenariosFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NegativeScenarios", "\there we add tests where we wont to check for negative scenario", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="add book with same id")]
        [Xunit.TraitAttribute("FeatureTitle", "NegativeScenarios")]
        [Xunit.TraitAttribute("Description", "add book with same id")]
        [Xunit.TraitAttribute("Category", "negative")]
        public virtual void AddBookWithSameId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("add book with same id", new string[] {
                        "negative"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Author",
                        "Title",
                        "Id",
                        "Description"});
            table1.AddRow(new string[] {
                        "OscardWild",
                        "Dorian gray",
                        "17",
                        "book about something"});
#line 6
 testRunner.Given("I have books", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Author",
                        "Title",
                        "Id",
                        "Description"});
            table2.AddRow(new string[] {
                        "OscardWild",
                        "Dorian gray",
                        "17",
                        "book about something"});
#line 9
 testRunner.Then("I should not be able to add the same book", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Search a Book by title for non existing book")]
        [Xunit.TraitAttribute("FeatureTitle", "NegativeScenarios")]
        [Xunit.TraitAttribute("Description", "Search a Book by title for non existing book")]
        [Xunit.TraitAttribute("Category", "negative")]
        public virtual void SearchABookByTitleForNonExistingBook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search a Book by title for non existing book", new string[] {
                        "negative"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I search for the books title \'NotFoundBook\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.Then("the book should be not found with title \'NotFoundBook\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NegativeScenariosFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NegativeScenariosFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
